<?php

namespace {entity_ns};

use Illuminate\Http\Response;
use Illuminate\Contracts\Encryption\DecryptException;
use Throwable;
use App\Foundation\Laravel\AppController;
use {entity_ns}\ActionsProcessors\{
    {entity_name}DestroyProcessor,
    {entity_name}IndexProcessor,
    {entity_name}ShowProcessor,
    {entity_name}StoreProcessor,
    {entity_name}UpdateProcessor,
};
use {entity_ns}\ActionsRequests\{
    {entity_name}DestroyRequest,
    {entity_name}IndexRequest,
    {entity_name}ShowRequest,
    {entity_name}StoreRequest,
    {entity_name}UpdateRequest,
};
use {entity_ns}\ActionsPresentations\{
    {entity_name}DestroyResource,
    {entity_name}IndexResource,
    {entity_name}ShowResource,
    {entity_name}StoreResource,
    {entity_name}UpdateResource,
};
use App\Foundation\Laravel\Responses\{
    SuccessResponse,
    ErrorResponse
};

class {classname} extends AppController
{
    public function index({entity_name}IndexRequest $request, {entity_name}IndexProcessor $processor): ErrorResponse|SuccessResponse
    {
        try {
            $data = $processor->execute($request);

            return new SuccessResponse(
                data: new {entity_name}IndexResource($data)
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                'An error occurred while trying to list the parcels',
                $exception
            );
        }
    }

    public function store({entity_name}StoreRequest $request, {entity_name}StoreProcessor $processor): ErrorResponse|SuccessResponse
    {
        try {
            $data = $processor->execute($request);

            return new SuccessResponse(
                new {entity_name}StoreResource($data),
                ['message' => '{entity_name_singular} was stored successfully'],
                Response::HTTP_CREATED
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                'An error occurred while trying to store the parcel',
                $exception
            );
        }
    }

    public function show(
        {entity_name}ShowRequest $request,
        {entity_name}ShowProcessor $processor,
        int|string $id
    ): ErrorResponse|SuccessResponse {
        try {
            $data = $processor->execute($request, $id);

            return new SuccessResponse(
                data: new {entity_name}ShowResource($data)
            );
        } catch (DecryptException $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to destroy the parcel. Not valid hash.',
                exception: $exception
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to show the parcel',
                exception: $exception
            );
        }
    }

    public function update(
        {entity_name}UpdateRequest $request,
        {entity_name}UpdateProcessor $processor,
        int|string $id
    ): ErrorResponse|SuccessResponse {
        try {
            $data = $processor->execute($request, $id);

            return new SuccessResponse(
                data: new {entity_name}UpdateResource($data),
                metadata: ['message' => '{entity_name_singular} was updated successfully',],
                code: Response::HTTP_CREATED,
                headers: []
            );
        } catch (DecryptException $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to destroy the parcel. Not valid hash.',
                exception: $exception
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to update the parcel',
                exception: $exception
            );
        }
    }

    public function destroy(
        {entity_name}DestroyRequest $request,
        {entity_name}DestroyProcessor $processor,
        int|string $id
    ): ErrorResponse|SuccessResponse {
        try {
            $data = $processor->execute($request, $id);

            return new SuccessResponse(
                data: new {entity_name}DestroyResource($data),
                metadata: ['message' => '{entity_name_singular} was destroyed successfully',],
                code: Response::HTTP_CREATED,
                headers: []
            );
        } catch (DecryptException $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to destroy the parcel. Not valid hash.',
                exception: $exception
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to destroy the parcel',
                exception: $exception
            );
        }
    }
}
