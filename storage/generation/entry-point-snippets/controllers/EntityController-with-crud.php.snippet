<?php

namespace {entity_ns};

use Illuminate\Http\Response;
use Throwable;
use App\Foundation\Laravel\AppController;
use {entity_ns}\ActionsProcessors\{
    {entity_name}DestroyProcessor,
    {entity_name}IndexProcessor,
    {entity_name}ShowProcessor,
    {entity_name}StoreProcessor,
    {entity_name}UpdateProcessor,
};
use {entity_ns}\ActionsRequests\{
    {entity_name}DestroyRequest,
    {entity_name}IndexRequest,
    {entity_name}ShowRequest,
    {entity_name}StoreRequest,
    {entity_name}UpdateRequest,
};
use {entity_ns}\ActionsPresentations\{
    {entity_name}DestroyPresentation,
    {entity_name}IndexPresentation,
    {entity_name}ShowPresentation,
    {entity_name}StorePresentation,
    {entity_name}UpdatePresentation,
};
use App\Foundation\Laravel\Responses\{
    SuccessResponse,
    ErrorResponse
};

class {classname} extends AppController
{
    public function index(
        {entity_name}IndexRequest $request,
        {entity_name}IndexProcessor $processor,
        {entity_name}IndexPresentation $presentation): ErrorResponse|SuccessResponse
    {
        try {
            return new SuccessResponse(
                $presentation->beautify(
                    $processor->execute($request)
                )
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                'An error occurred while trying to list the {entity_name_singular}s',
                $exception
            );
        }
    }

    public function store(
        {entity_name}StoreRequest $request,
        {entity_name}StoreProcessor $processor,
        {entity_name}StorePresentation $presentation): ErrorResponse|SuccessResponse
    {
        try {
            return new SuccessResponse(
                $presentation->beautify(
                    $processor->execute($request)
                ),
                ['message' => '{entity_name_singular} was stored successfully'],
                Response::HTTP_CREATED
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                'An error occurred while trying to store the {entity_name_singular}',
                $exception
            );
        }
    }

    public function show(
        {entity_name}ShowRequest $request,
        {entity_name}ShowProcessor $processor,
        {entity_name}ShowPresentation $presentation,
        int|string $id
    ): ErrorResponse|SuccessResponse {
        try {
            return new SuccessResponse(
                $presentation->beautify(
                    $processor->execute($request, $id)
                )
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to show the {entity_name_singular}',
                exception: $exception
            );
        }
    }

    public function update(
        {entity_name}UpdateRequest $request,
        {entity_name}UpdateProcessor $processor,
        {entity_name}UpdatePresentation $presentation,
        int|string $id
    ): ErrorResponse|SuccessResponse {
        try {
            return new SuccessResponse(
                data: $presentation->beautify(
                    $processor->execute($request, $id)
                ),
                metadata: ['message' => '{entity_name_singular} was updated successfully',],
                code: Response::HTTP_ACCEPTED
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to update the {entity_name_singular}',
                exception: $exception
            );
        }
    }

    public function destroy(
        {entity_name}DestroyRequest $request,
        {entity_name}DestroyProcessor $processor,
        {entity_name}DestroyPresentation $presentation,
        int|string $id
    ): ErrorResponse|SuccessResponse {
        try {
            return new SuccessResponse(
                $presentation->beautify(
                    $processor->execute($request, $id)
                ),
                ['message' => '{entity_name_singular} was destroyed successfully',],
                Response::HTTP_ACCEPTED
            );
        } catch (Throwable $exception) {
            return new ErrorResponse(
                message: 'An error occurred while trying to destroy the {entity_name_singular}',
                exception: $exception
            );
        }
    }
}
